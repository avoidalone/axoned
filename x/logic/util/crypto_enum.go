// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.8
// Revision: 3d844c8ecc59661ed7aa17bfd65727bc06a60ad8
// Build Date: 2023-09-18T14:55:21Z
// Built By: goreleaser

package util

import (
	"fmt"
	"strings"
)

const (
	// HashAlgSha256 is a HashAlg of type Sha256.
	HashAlgSha256 HashAlg = iota
	// HashAlgSha512 is a HashAlg of type Sha512.
	HashAlgSha512
)

var ErrInvalidHashAlg = fmt.Errorf("not a valid HashAlg, try [%s]", strings.Join(_HashAlgNames, ", "))

const _HashAlgName = "sha256sha512"

var _HashAlgNames = []string{
	_HashAlgName[0:6],
	_HashAlgName[6:12],
}

// HashAlgNames returns a list of possible string values of HashAlg.
func HashAlgNames() []string {
	tmp := make([]string, len(_HashAlgNames))
	copy(tmp, _HashAlgNames)
	return tmp
}

var _HashAlgMap = map[HashAlg]string{
	HashAlgSha256: _HashAlgName[0:6],
	HashAlgSha512: _HashAlgName[6:12],
}

// String implements the Stringer interface.
func (x HashAlg) String() string {
	if str, ok := _HashAlgMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HashAlg(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x HashAlg) IsValid() bool {
	_, ok := _HashAlgMap[x]
	return ok
}

var _HashAlgValue = map[string]HashAlg{
	_HashAlgName[0:6]:  HashAlgSha256,
	_HashAlgName[6:12]: HashAlgSha512,
}

// ParseHashAlg attempts to convert a string to a HashAlg.
func ParseHashAlg(name string) (HashAlg, error) {
	if x, ok := _HashAlgValue[name]; ok {
		return x, nil
	}
	return HashAlg(0), fmt.Errorf("%s is %w", name, ErrInvalidHashAlg)
}
